#지켜야 할 것
1. 자세
- 1일 연구보고: 연구 내용, 결과 공유, 토의 사항
- 연구노트 작성: 연구미팅 후 개선사항 및 개선활동

2. 연구활동
- 연구주제 파악 
- 문제정의, 기존 연구 단점, 개선안 등 연구 활동에 대한 사이클 파악 및 실천
- 연구, 구현 및 실험 활동에 대한 정확한 기술문서 작성 및 공유


#자료의 순서
1. 목표
2. 연구 배경/ 개발 배경 (필요성)
3. 관련 연구 (SW 개발은 생략)
4. 제안 방법 (SW 구조, 기능 등)
5. 구현/실험 결과


#Boodio 작동 방식 (FlowChart)
라디오 파일을 Audio Fragment로 분할 (분할 이유: 분석 및 처리 용이, 정확도 향상, 효율성 증가)
Spectrogram Hash 사용하여 분할 (사용 목적: 오디오 분할/비교/검색에 사용)
스펙트로그램을 통해 음성 데이터를 시각화, but 배경이 있는 대본과 잔잔한 노래 구분 어려움 -> Spleeter 사용

라디오 파일 -> Fragment 단위로 Split -> Whisper 사용하여 Text화 -> 
변환된 텍스트 결과 병합 -> STT 스크립트 -> 중복표현 제거하여 정제 -> 
문장 조정 -> 라디오 스크립트 생성 -> 포맷 분류 -> MR 제거 ->
ResNet18 사용하여 Format 분류 -> 시간 기반으로 간격 수정 ->
스피치 부분만 남김 -> 라디오 스크립트 완성  

Bert 사용하여 음악 Format 분류 (사용 이유: 양방향 문맥 이해 가능, 앞뒤문맥 고려하여 노래/광고 분석가능)
사전 학습과 미세조정(Fine-Tuning 가능)

#내가 생각하는 개선안
- 정확도 향상
대본 분류기: 97.1%, 포맷 분류기: 92.6%의 정확도.
포맷 분류기의 정확도를 향상시킬것

- 키워드 추출후 이미지 생성에 대한 평가 지표 생성
현재 프로그램에서 키워드 추출후 해당 키워드와 관련된 이미지 자동생성하는데,
해당 이미지가 얼마나 관련된 이미지인지에 대한 평가지표 존재하지 않음. 
평가지표 생성후, 이미지에 대한 구체화

- DB 사용한 키워드별 검색
현재 DB가 구성되어있으나, 해시테이블 사용 용도 외에 추가적인 기능 존재X.
DB를 통해 키워드별 검색 기능 구현

- 음성 녹음 기능 구현
라디오 녹음후 직접 Text화가능하도록 진행.

#기존 연구의 단점
- 처리속도를 높이기 위해 오디오를 분할하여 병렬 처리중
맥락 단절 위험성 존재. STT로 변환시 문장이 잘못 인식될 가능성 존재.

- 


#일일 보고 Feedback
8/12(월)
내가 한 성과를 앞에 배치하기.
관련연구 꼭 첨부하기.
내가 차별화한 내용과 기존 관련연구 비교하기.
문제 제시하기.
현재 목표: '1달안에 정확도 높이고 추가구현 끝내기'
코딩한 내용 넣는것이 중요

8/13(화)
PPT 슬라이드 개선하기 (자간, 관련연구 첨부등)
연구자료 관련 출처 확실히 적기
목표와 할일을 구분해서 적기 (목표: Software의 목표, 할일: Software 기능구현을 위해 내가 할 일)
문제 확실히 파악하기 (문제 Define이 가장 중요)
Input과 Output 확실히 파악하기
해당 Software를 '왜' 만드는지, '왜' 하는지 파악하기
IO 확실히하기. IO 설계하기.
발표자료 Text 최소화하기
거의 일치, 의도에 맞게 등 모호한 표현 대신, 확실하게 맞다, 아니다로 표현하기
일기가 아닌, 산출물 방식으로 작성하기.
스스로 학습하고자하는 방향 제시가 중요.

8/16(금)
개조형으로 적기
자료를 매일 새로 적지말고, 기존 자료를 보강하는식으로 진행
IO별 실행유무 확인
관련연구자료 넣을때 어떤 Dataset을 사용하였는지, IO는 무엇인지, 결과및 개선점에 대해 자세히 적기
docker통해 실행할때, 한번에 다 실행하려고 하지말고 각각의 프로그램 나눠서 실행해보기.

#매일 진행한 내용
8/12(월)
라디오 요약 Software에 사용하는 알고리즘 및 개발도구들에 대해 관련 연구 조사

직접 하는 피드백: 알고리즘과, 개발도구들이 정확히 무얼 하는지 개념 파악을 확실히 하지 않고,
수치적으로만 비교하려고 함. 단순히 수치비교를 통해 더 나은 것들을 선택하는걸 우선시 하였음.
앞으로는 정확한 개념 파악을 우선시 할 것

8/13(화)
위의 내용 토대로, 개념 확실히 이해하는 과정 진행. 논문을 다시한번 꼼꼼히 읽고, 이해 안되는 부분들
확실히 이해하고, Flowchart를 통해 흐름에 대해 확실히 이해한 뒤, IO 파악.

직접 하는 피드백: 실제 코딩 과정으로 빠르게 진행해야하는데 속도가 너무 더디다고 생각함.

8/14(수)
어제 작성한 IO를 더 디테일하게 파악하라는 박사님의 Feedback이 있어서, 더 디테일하게 파악하여 작성함.
추가적으로, 구현을 위해 설계된 프로그램 동작확인과정 진행.
docker를 통해 실행과정 진행하였는데, nvidia-runtime 에러가 지속적으로 발생함.
nvidia driver 삭제후 재설치. docker 삭제후 재설치. docker-runtime 삭제후 재설치, 
cuda 삭제후 재설치까지 진행하였고, 여전히 실행되지 않는 상태.

직접 하는 피드백: 실행과정 빠른 마무리 이후 코딩 구현이 필요

8/16(금)
박사님 Feedback통해 docker에서 개별 프로그램 나눠서 실행하는 과정 진행함.
총 5개의 프로그램 (MySQL, Visual Radio, Front, Nginx, Collector)으로 구분되어 있었음.
허나 의존성으로 인해 MySQL이 실행되어야 Visual Radio가 실행가능하고,
Visual-Radio가 실행되어야 Front와 nginx가 실행가능하고, 
nginx와 Visual Radio가 실행되어야 Collector가 실행되는 식으로 구성되어있었음.
MySQL만 개별진행하였는데 실행되지않아 확인하니, Version 이슈가 있어 Version 수정후 정상 작동 확인.
이후 수요일부터 발생하였던 nvidia-runtime 에러가 발생하여 다시한번 docker 재설치후 
daemon.json 파일 수정 및 nvidia-container-toolkit 재설치후 에러 해결하였다.
이후 다시 실행하니, werkzeug 라이브러리와 관련된 에러가 발생하여, 해당 에러 수정진행중이다.

추가적으로, 기존의 MySQL, Youtube Developer, 네이버 Developer 관련 API를 내가 발행한 API로 변경.

직접 하는 피드백: 환경설정에 시간투자가 너무 많이 진행되고 있다. 늦어도 월요일에는 코딩작업을 시작해야한다.

